#!/usr/bin/env node

var fs = require('fs');
var verifyRequirements = require('./utils/verify-requirements');
var safeExec = require('./utils/child-process-wrapper.js').safeExec;
var path = require('path');

var userHomeDirectory = (process.platform === 'win32') ? process.env.USERPROFILE : process.env.HOME;
var appPackageJSON = JSON.parse(fs.readFileSync(path.resolve(__dirname, '..', 'package.json')));
var targetElectronVersion = appPackageJSON['electronVersion'];
var targetPlatform = require('os').platform();

var t0, t1;

// Executes an array of commands in series
function executeCommands(commands, done, index) {
  if (index != undefined) {
    t1 = Date.now();
    console.log("=> Took " + (t1 - t0) + "ms.");
    console.log();
  }

  index = (index == undefined ? 0 : index);
  if (index < commands.length) {
    var command = commands[index];
    if (command.message)
      console.log(command.message);
    var options = null;
    if (typeof command !== 'string') {
      options = command.options;
      command = command.command;
    }
    t0 = Date.now();
    safeExec(command, options, executeCommands.bind(this, commands, done, index + 1));
  }
  else
    done(null);
}

function makeSqlite3Command() {
  var nodeGypPath = path.resolve(__dirname, '..', 'build', 'node_modules', 'npm', 'node_modules', '.bin', 'node-gyp');
  if (targetPlatform == "win32") {
    // As of Electron 0.29.2, all windows machines, even if they're 64 bit,
    // return "ia32" as the arch
    var targetArch = "ia32"
  } else {
    var targetArch = require('os').arch();
  }

  // Use our local version of npm (npm 3x) to build sqlite
  var npmPath = '"' + path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'npm') + '"';
  return npmPath + " install https://github.com/bengotow/node-sqlite3/archive/bengotow/fts5.tar.gz --ignore-scripts && cd node_modules/sqlite3 && "+nodeGypPath+" configure rebuild --target="+targetElectronVersion+" --arch="+targetArch+" --target_platform="+targetPlatform+" --dist-url=https://atom.io/download/atom-shell --module_name=node_sqlite3 --module_path=../lib/binding/electron-v0.36-"+targetPlatform+"-"+targetArch
}

function bootstrap() {
  var apmInstallPath = path.resolve(__dirname, '..', 'apm');
  if (!fs.existsSync(apmInstallPath))
    fs.mkdirSync(apmInstallPath);
  if (!fs.existsSync(path.join(apmInstallPath, 'node_modules')))
    fs.mkdirSync(path.join(apmInstallPath, 'node_modules'));

  var apmPath = path.resolve(__dirname, '..', 'apm', 'node_modules', 'atom-package-manager', 'bin', 'apm');
  var apmFlags = process.env.JANKY_SHA1 || process.argv.indexOf('--no-color') !== -1 ? ' --no-color' : '';

  // use the system version of npm to install build folder dependencies, including our
  // own copy of NPM 3.x, which we'll use for subsequent command
  var npmPath = path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'npm');
  var initialNpmCommand = fs.existsSync(npmPath) ? npmPath : 'npm';
  var npmFlags = ' --userconfig=' + path.resolve(__dirname, '..', 'build', '.npmrc') + ' ';

  var gruntPath = '"' + path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'grunt') + '"';

  var packagesToDedupe = [
    'abbrev',
    'amdefine',
    'atom-space-pen-views',
    'cheerio',
    'domelementtype',
    'fs-plus',
    'grim',
    'highlights',
    'humanize-plus',
    'iconv-lite',
    'inherits',
    'loophole',
    'oniguruma',
    'q',
    'request',
    'rimraf',
    'roaster',
    'season',
    'sigmund',
    'semver',
    'through',
    'temp'
  ];

  var buildInstallCommand = initialNpmCommand + npmFlags + 'install';
  var buildInstallOptions = {cwd: path.resolve(__dirname, '..', 'build')};
  var apmInstallCommand = npmPath + npmFlags + '--target=0.10.40 ' + 'install';
  var apmInstallOptions = {cwd: apmInstallPath};
  var moduleInstallCommand = apmPath + ' install' + apmFlags;
  var dedupeApmCommand = apmPath + ' dedupe' + apmFlags;

  var sqlite3Command = makeSqlite3Command();

  var apmEnv = JSON.parse(JSON.stringify(process.env))
  apmEnv['ATOM_ELECTRON_VERSION'] = targetElectronVersion;
  apmEnv['ATOM_HOME'] = path.join(userHomeDirectory, '.nylas');

  var integrationCommand = npmPath + npmFlags + 'install';
  var integrationOptions = {cwd: path.resolve(__dirname, '..', 'spec_integration')};

  var gruntCmd = "";
  var downloadElectronCmd = gruntPath + " download-electron --gruntfile build/Gruntfile.coffee";

  if (process.argv.indexOf('--no-quiet') === -1) {
    buildInstallCommand  += ' --loglevel error';
    apmInstallCommand    += ' --loglevel error';
    moduleInstallCommand += ' --loglevel error';
    integrationCommand   += ' --loglevel error';
    moduleInstallCommand += ' --loglevel error';
    dedupeApmCommand     += ' --quiet';

    buildInstallOptions.ignoreStdout = true;
    apmInstallOptions.ignoreStdout = true;
    integrationOptions.ignoreStdout = true;
  }

  // apm ships with 32-bit node so make sure its native modules are compiled
  // for a 32-bit target architecture
  if (process.env.JANKY_SHA1 && process.platform === 'win32')
    npmInstallApmCommand += ' --arch=ia32';

  var internalPackageCommands = [];
  // we need this because we don't put our modules in node_modules and npm
  // install doesn't find them. Run APM install on each package directory manually.
  [
    path.resolve(__dirname, '..', 'internal_packages')
  ].forEach(function(packagesDir) {
    fs.readdirSync(packagesDir).forEach(function(dir) {
      var dirPackageJSONPath = path.join(packagesDir, dir, 'package.json');
      // On windows and linux, invoking the apm command is very slow even when there are no
      // dependencies. Make it faster by not calling unless we find there are deps.
      if (fs.existsSync(dirPackageJSONPath)) {
        var dirPackageJSON = JSON.parse(fs.readFileSync(dirPackageJSONPath));
        if (dirPackageJSON.dependencies && (Object.keys(dirPackageJSON.dependencies).length > 0)) {
          internalPackageCommands.push({
            command: moduleInstallCommand,
            message: "Installing dependencies for " + dir,
            options: {
              cwd: path.join(packagesDir, dir),
              env: apmEnv
            }
          });
        }
      }
    });
  });

  var commands = [
    {
      command: buildInstallCommand,
      message: 'Installing build modules...',
      options: buildInstallOptions
    },
    {
      command: gruntPath + " add-nylas-build-resources --gruntfile build/Gruntfile.coffee",
      message: 'Adding custom Nylas resources...',
      options: {}
    },
    {
      command: apmInstallCommand,
      message: 'Installing apm...',
      options: apmInstallOptions
    },
    {
      command: apmPath + ' clean' + apmFlags,
      message: 'Deleting old packages...'
    },
    moduleInstallCommand,
  ];
  var afterPackageInstallCommands = [
    dedupeApmCommand + ' ' + packagesToDedupe.join(' '),
    {
      command: downloadElectronCmd,
      message: 'Getting Electron v' + targetElectronVersion
    },
    {
      command: integrationCommand,
      message: 'Installing integration test modules...',
      options: integrationOptions
    },
    {
      command: sqlite3Command,
      message: "Building sqlite3 with command: "+sqlite3Command
    }
  ];

  commands = commands.concat(internalPackageCommands, afterPackageInstallCommands);
  executeCommands(commands, process.exit);
}

verifyRequirements(function(error, successMessage) {
  if (error) {
    console.log(error);
    process.exit(1);
  }

  console.log(successMessage);
  bootstrap();
});
